Python Exercises

Chapter 4: Basic Statements

1. Read in a login, a full name, and a password on three different prompts. If the login is blank, print an error message . Print the values back to STDOUT.

2. Read from standard input a line containing digits. Count the number of times each digit appears in the file and produce a report (write it to standard output).

3. Define a dictionary with unique values. Now “switch sides” in the dictionary: make a new dictionary where the keys are the values and vice versa. Print the new dictionary.

4. Read a file. Count the number of times each character appears in the file. Produce a report (write it to a new file).


Chapter 5: Functions

5. Write a function that accepts a series of numbers, and returns the biggest number, the smallest number and the average.
Hint: Most of the work is already done by built-in functions.

6. Write a function that accepts two lists of the same size and swaps their contents.
Usage example:
>>> l1 = [1,2,3]
>>> l2 = [4,5,6]
>>> swap_list(l1,l2)
>>> l1
[4,5,6]
>>> l2
[1,2,3]




7. Write a function that accepts a parameter x and a list of unary functions and returns a list of results of applying the functions in the list on x.
Example:
>>> apply_funcs([lambda x:x**2, lambda x:x+1],3)
[9, 4]
8. Write a function that accepts a list of numbers and returns the sum of odd numbers in the list minus the sum of even numbers in it.
	
	



Chapter 6: Modules
	
	Write a module for dealing with dates.
	It will have a mapping from month name to number of days in that month, and also from month number to month name.

	The following functions should be defined:
	
	get_num_of_days_in_month(month_name)
	get_following_month(month_name)
	is_leap_year(year)

Chapter 7: Classes

	Edit your date module:
1. Write a class that represents a Date.
It will be initialized from 3 numbers: day, month, year. The __init__ method will check the validity of the arguments.
Overload the operators: >, < , ==, !=, <=, >=.
	      Write an __str__() method.

The data defined previously in the module will be used for validity checking of  the dates.



2. Write a class Callender.
It will have the attribute events – a mapping from event name to date object.
Write the following methods:

Get_date(self, name)
add_event(self, name, date)
is_event(self,date)
get_all_events_in_month(self,month)

3. Write a script which creates a calendar from a file built as described below :
Event_name day.month.year
Event_name day.month.year
Event_name day.month.year
	
		Hint: The module time can tell you what the current month is.


Chapter 8: Exceptions

Go over the classes you wrote in the previous exercise.
Add exception handling everywhere it is needed. (Raise an exception for invalid arguments).
You might want to write your own exceptions for that.
The calendar creating script will handle the exceptions.

Chapter 9: System Programming

1. Implement a thread- safe stack with the following methods:
Push(self,x)
Pop(self)

Write a script that will run 3 producer threads, which will put numbers up to 20  in the stack, and 3 consumer threads which will pop letters from the stack.

	
