Python Programming
Exercise Book



Chapter 3: Types and Operators
================================================
Ex 1
Read from standard input a line containing digits.
If the line contains non-digits, print an error message.
If it's valid, count the number of times each digit (0-9) appears in the line and print a report.

Ex 2
Define a dictionary with unique values. Now “switch sides” in the dictionary: make a new dictionary where the keys are the values and vice versa. Print the new dictionary.

Ex 3
Read a file. Count the number of times each word appears in the file. Produce a report (write it to a new file).



Chapter 5: Functions
=============================
Ex 4
Write a function that accepts a series of numbers, and returns the biggest number, the smallest number and the average.
Hint: Most of the work is already done by built-in functions.

Ex 5
Repeat Ex 2, but now as a function:
Write a function that receives a dictionary and returns a new dictionary with “switched sides”.
Write a documentation string, including a doctest.






Chapter 6: Data Processing
===========================================
Ex 6
Write a function that receives a list of unary functions and a single argument, and calls each function with the argument.  It should return a list of the results.
Note that this is the opposite of map() which applies one function to different arguments.

[Bonus Ex: take any number of arguments, including named arguments, and pass them to each function.]

Ex 7
Repeat Ex 6 but now write it as a generator.  It should call the functions only as you request their results.  Verify this by calling it with functions that print something.

Ex 8
Write a generator that combines lines of text into paragraphs, separated by blank lines.
It will receive an iterables of lines (e.g. a file) as an argument, and should yield a whole paragraph (as strings with newlines).
[Bonus Ex: use textwrap.wrap() to reformat paragraphs produced by this generator.]



Chapter 9: System Programming
==================================================

Ex 9
Write a script that imports the module with the runs a hangman game.
It should receive the secret word as a command-line argument.
It should ask the user for guesses, exiting when he types "exit".

