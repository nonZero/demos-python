Chapter 1: Assertions and Unit tests
====================================
1. Use unittest to test the glob.glob() function.
2 interesting cases are enough for this exercise.

Hint: you’ll want to use tempfile.mkdtemp() and shutil.rmtree().
Chapter 2: Function decorators
2. Write a decorator that redirects sys.stdout to the file “out.txt” and for the duration of the function, and restores the original value when it returns:

@with_output_to_out_txt
def f():
 ...

For simplicity, you can assume the decorated function takes no parameters.

3. [advanced]
Same as previous question but you want the decorator to receive the file name as a parameter:

@with_output_to("out.txt")
def f():
 ...

Hint: it’s a function that returns a decorator!
So you’ll probably have 3 functions nested inside each other…

Chapter 5: Generators
=====================
4. Your task is to reformat paragraphs in a text stream.
Your input will be an iterator of lines.
Your output shall also be an iterator of lines.
Paragraphs in this exercise are delimited by empty lines.
They should be reformatted using textwrap.wrap with default settings.

Hint: use a pipeline of several stages.

Debugging hint:
print list(reformat(['foo', 'bar', '', 'quux', 'quuux']))

Chapter 7: Context Managers
===========================
5. Write a context manager that redirects sys.stdout to a file for the duration of the block, and restores it on exit.

Note: compare your code to exercises 2-3.  See how much simpler it is?
Conclusion: don't use decorators when a context manager would do.
